package {{package}};

import {{invokerPackage}}.ApiClient;

{{#imports}}import {{import}};
{{/imports}}

{{^fullJavaUtil}}import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;{{/fullJavaUtil}}

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.util.UriComponentsBuilder;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.core.io.FileSystemResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;

{{>generatedAnnotation}}
@Component("{{package}}.{{classname}}")
{{#operations}}
public class {{classname}} {
    private ApiClient {{localVariablePrefix}}apiClient;

    public {{classname}}() {
        this(new ApiClient());
    }

    @Autowired
    public {{classname}}(ApiClient apiClient) {
        this.{{localVariablePrefix}}apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return {{localVariablePrefix}}apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.{{localVariablePrefix}}apiClient = apiClient;
    }

    {{#operation}}
    {{#contents}}
    /**
     * {{summary}}
     * {{notes}}
    {{#responses}}
     * <p><b>{{code}}</b>{{#message}} - {{message}}{{/message}}
    {{/responses}}
    {{#vendorExtensions.x-parameterAsObject}}
     * @param {{lower (substring vendorExtensions.x-parameterAsObject 0 1)}}{{substring vendorExtensions.x-parameterAsObject 1}}
    {{/vendorExtensions.x-parameterAsObject}}
    {{^vendorExtensions.x-parameterAsObject}}
    {{#parameters}}
     * @param {{paramName}} {{description}}{{^description}}The {{paramName}} parameter{{/description}}
    {{/parameters}}
    {{/vendorExtensions.x-parameterAsObject}}
    {{#returnType}}
     * @return {{returnType}}
    {{/returnType}}
     * @throws RestClientException if an error occurs while attempting to invoke the API
    {{#externalDocs}}
     * {{description}}
     * @see <a href="{{url}}">{{summary}} Documentation</a>
    {{/externalDocs}}
     */
    public {{#returnType}}{{{returnType}}} {{/returnType}}{{^returnType}}void {{/returnType}}{{operationId}}({{#parameters}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/parameters}}) throws RestClientException {
        {{#vendorExtensions.x-parameterAsObject}}
            {{vendorExtensions.x-parameterAsObject}} {{lower (substring vendorExtensions.x-parameterAsObject 0 1)}}{{substring vendorExtensions.x-parameterAsObject 1}}
        {{/vendorExtensions.x-parameterAsObject}}
        {{^vendorExtensions.x-parameterAsObject}}
            {{#parameters}}{{{dataType}}} {{paramName}}{{#has this 'more'}}, {{/has}}{{/parameters}}
        {{/vendorExtensions.x-parameterAsObject}}
        ) throws RestClientException {


        {{#vendorExtensions.x-parameterAsObject}}
            Object {{localVariablePrefix}}postBody = {{#bodyParam}}{{lower (substring vendorExtensions.x-parameterAsObject 0 1)}}{{substring vendorExtensions.x-parameterAsObject 1}}.get{{capitalize paramName}}(){{/bodyParam}}{{^bodyParam}}null{{/bodyParam}};

            {{#parameters}}
            {{#required}}
            // verify the required parameter '{{paramName}}' is set
            if ({{lower (substring vendorExtensions.x-parameterAsObject 0 1)}}{{substring vendorExtensions.x-parameterAsObject 1}}.get{{capitalize paramName}}() == null) {
                throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter '{{paramName}}' when calling {{operationId}}");
            }
            {{/required}}
            {{/parameters}}

            {{#hasPathParams}}
            // create path and map variables
            final Map<String, Object> uriVariables = new HashMap<String, Object>();
            {{#pathParams}}
            uriVariables.put("{{baseName}}", {{lower (substring vendorExtensions.x-parameterAsObject 0 1)}}{{substring vendorExtensions.x-parameterAsObject 1}}.get{{capitalize paramName}}());
            {{/pathParams}}
            {{/hasPathParams}}
        {{/vendorExtensions.x-parameterAsObject}}
        {{^vendorExtensions.x-parameterAsObject}}
            Object {{localVariablePrefix}}postBody = {{#bodyParam}}{{paramName}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}};

            {{#parameters}}
            {{#required}}
            // verify the required parameter '{{paramName}}' is set
            if ({{paramName}} == null) {
                throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter '{{paramName}}' when calling {{operationId}}");
            }
            {{/required}}
            {{/parameters}}

            {{#hasPathParams}}
            // create path and map variables
            final Map<String, Object> uriVariables = new HashMap<String, Object>();
            {{#pathParams}}
            uriVariables.put("{{baseName}}", {{{paramName}}});
            {{/pathParams}}
            {{/hasPathParams}}
        {{/vendorExtensions.x-parameterAsObject}}
        String {{localVariablePrefix}}path = UriComponentsBuilder.fromPath("{{{path}}}"){{#hasPathParams}}.buildAndExpand(uriVariables){{/hasPathParams}}{{^hasPathParams}}.build(){{/hasPathParams}}.toUriString();
        
        final MultiValueMap<String, String> {{localVariablePrefix}}queryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders {{localVariablePrefix}}headerParams = new HttpHeaders();
        final MultiValueMap<String, Object> {{localVariablePrefix}}formParams = new LinkedMultiValueMap<String, Object>();

        {{#vendorExtensions.x-parameterAsObject}}
            {{#hasQueryParams}}
            {{#queryParams}}
            {{localVariablePrefix}}queryParams.putAll({{localVariablePrefix}}apiClient.parameterToMultiValueMap({{#collectionFormat}}ApiClient.CollectionFormat.valueOf("{{{collectionFormat}}}".toUpperCase()){{/collectionFormat}}{{^collectionFormat}}null{{/collectionFormat}}, "{{baseName}}", {{lower (substring vendorExtensions.x-parameterAsObject 0 1)}}{{substring vendorExtensions.x-parameterAsObject 1}}.get{{capitalize paramName}}()));
            {{/queryParams}}
            {{/hasQueryParams}}
            {{#hasHeaderParams}}
            {{#headerParams}}
            if ({{lower (substring vendorExtensions.x-parameterAsObject 0 1)}}{{substring vendorExtensions.x-parameterAsObject 1}}.get{{capitalize paramName}}() != null)
                {{localVariablePrefix}}headerParams.add("{{baseName}}", {{localVariablePrefix}}apiClient.parameterToString({{lower (substring vendorExtensions.x-parameterAsObject 0 1)}}{{substring vendorExtensions.x-parameterAsObject 1}}.get{{capitalize paramName}}()));
            {{/headerParams}}
            {{/hasHeaderParams}}
            {{#hasFormParams}}
            {{#formParams}}
            if ({{lower (substring vendorExtensions.x-parameterAsObject 0 1)}}{{substring vendorExtensions.x-parameterAsObject 1}}.get{{capitalize paramName}}() != null)
                {{localVariablePrefix}}formParams.add("{{baseName}}", {{#is this 'file'}}new FileSystemResource({{lower (substring vendorExtensions.x-parameterAsObject 0 1)}}{{substring vendorExtensions.x-parameterAsObject 1}}.get{{capitalize paramName}}()){{/is}}{{#isNot this 'file'}}{{lower (substring vendorExtensions.x-parameterAsObject 0 1)}}{{substring vendorExtensions.x-parameterAsObject 1}}.get{{capitalize paramName}}(){{/isNot}});
            {{/formParams}}
            {{/hasFormParams}}
        {{/vendorExtensions.x-parameterAsObject}}
        {{^vendorExtensions.x-parameterAsObject}}
            {{#hasQueryParams}}
            {{#queryParams}}
            {{localVariablePrefix}}queryParams.putAll({{localVariablePrefix}}apiClient.parameterToMultiValueMap({{#collectionFormat}}ApiClient.CollectionFormat.valueOf("{{{collectionFormat}}}".toUpperCase()){{/collectionFormat}}{{^collectionFormat}}null{{/collectionFormat}}, "{{baseName}}", {{paramName}}));
            {{/queryParams}}
            {{/hasQueryParams}}
            {{#hasHeaderParams}}
            {{#headerParams}}
            if ({{paramName}} != null)
                {{localVariablePrefix}}headerParams.add("{{baseName}}", {{localVariablePrefix}}apiClient.parameterToString({{paramName}}));
            {{/headerParams}}
            {{/hasHeaderParams}}
            {{#hasFormParams}}
            {{#formParams}}
            if ({{paramName}} != null)
                {{localVariablePrefix}}formParams.add("{{baseName}}", {{#is this 'file'}}new FileSystemResource({{paramName}}){{/is}}{{#isNot this 'file'}}{{paramName}}{{/isNot}});
            {{/formParams}}
            {{/hasFormParams}}
        {{/vendorExtensions.x-parameterAsObject}}

        final String[] {{localVariablePrefix}}accepts = { {{#hasProduces}}
            {{#produces}}"{{mediaType}}"{{#hasMore}}, {{/hasMore}}{{/produces}}
        {{/hasProduces}} };
        final List<MediaType> {{localVariablePrefix}}accept = {{localVariablePrefix}}apiClient.selectHeaderAccept({{localVariablePrefix}}accepts);
        final String[] {{localVariablePrefix}}contentTypes = { {{#hasConsumes}}
            {{#consumes}}"{{mediaType}}"{{#hasMore}}, {{/hasMore}}{{/consumes}}
        {{/hasConsumes}} };
        final MediaType {{localVariablePrefix}}contentType = {{localVariablePrefix}}apiClient.selectHeaderContentType({{localVariablePrefix}}contentTypes);

        String[] {{localVariablePrefix}}authNames = new String[] { {{#authMethods}}"{{name}}"{{#hasMore}}, {{/hasMore}}{{/authMethods}} };

        {{#returnType}}ParameterizedTypeReference<{{{returnType}}}> {{localVariablePrefix}}returnType = new ParameterizedTypeReference<{{{returnType}}}>() {};{{/returnType}}{{^returnType}}ParameterizedTypeReference<Void> {{localVariablePrefix}}returnType = new ParameterizedTypeReference<Void>() {};{{/returnType}}
        {{#returnType}}return {{/returnType}}{{localVariablePrefix}}apiClient.invokeAPI({{localVariablePrefix}}path, HttpMethod.{{httpMethod}}, {{localVariablePrefix}}queryParams, {{localVariablePrefix}}postBody, {{localVariablePrefix}}headerParams, {{localVariablePrefix}}formParams, {{localVariablePrefix}}accept, {{localVariablePrefix}}contentType, {{localVariablePrefix}}authNames, {{localVariablePrefix}}returnType);
    }

    {{#vendorExtensions.x-parameterAsObject}}
        public static class {{vendorExtensions.x-parameterAsObject}} {
            {{#parameters}}
                    private {{{dataType}}} {{paramName}};
            {{/parameters}}

            public {{vendorExtensions.x-parameterAsObject}}() {
            }

            public {{vendorExtensions.x-parameterAsObject}}({{#parameters}}{{{dataType}}} {{paramName}}{{#has this 'more'}}, {{/has}}{{/parameters}}) {
                {{#parameters}}
                    this.{{paramName}} = {{paramName}};
                {{/parameters}}
            }

            {{#parameters}}
                    public void set{{capitalize paramName}}({{{dataType}}} {{paramName}}) {
                        this.{{paramName}} = {{paramName}};
                    }

                    public {{{dataType}}} get{{capitalize paramName}}() {
                        return this.{{paramName}};
                    }

                    public {{vendorExtensions.x-parameterAsObject}} {{paramName}}({{{dataType}}} {{paramName}}) {
                        this.{{paramName}} = {{paramName}};
                        return this;
                    }
            {{/parameters}}
        }
    {{/vendorExtensions.x-parameterAsObject}}
    {{/contents}}
    {{/operation}}
}
{{/operations}}
